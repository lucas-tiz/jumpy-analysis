#TODO: implement deg2rad conversions in matlab code
#TODO: organize parameter group order
cam: # cam parameters (general parameters used for all joints)
  d: 55 # (cm) robot link length; required for muscle-cam tangency calculation
  phi_range: [0, 180] # (deg) cam parameterization angle range (range for which cam geometry exists)
  beta_range: [-20 200] # (deg) joint angle (cam) range for cam profile calculations TODO: change vector to range + inc in code
  beta_inc: 10 # (deg) joint angle (cam) range for cam profile calculations

knee: # knee joint parameters
  rad0: 5.0 # (cm) cam radius at zero degrees
  slope: 0 # (cm/rad) cam profile radius slope
  theta_range: [180 0] # (deg) joint angle theta range over which to map cam angle beta from 0 to 180  
  k_tendon: 500 # (N cm) tendon stiffness

hip: # hip joint parameters
  rad0: 5.0
  slope: 0
  theta_range: [0 180]
  k_tendon: 500

#TODO: robot starting configuration stuff
state0: # initial robot state
  wb: 0.55 # (m) hexapod base width (food width apart)
  #x0 (initial joint positions and velocities):
  q0: [-70, 140, 20, 20, 140] # (rad) [angle 1, knee_r, hip_r, hip_l, knee_l] initial joint angles TODO: auto calculate angle 1 from other angles
  qd0: [0, 0, 0, 0] # (rad/s) [knee_r, hip_r, hip_l, knee_l] initial joint velocities

control: # control parameters [knee_r, hip_r, hip_l, knee_l]
  p_max: 241.3 # (kPa) max muscle pressure
  t_musc_activate: [0.0, 0.0, 0.0, 0.0] # (sec) muscle activation timings

model: # overall robot model parameters [knee_r, hip_r, hip_l, knee_l]
  joint_damp: [0.6, 0.8, 0.8, 0.6] # (Nm / rad/s) joint damping
  joint_damp_lims: [0, 90, 90, 0] # (deg) limits at which joint damping engages TODO: maybe just have damping over entire range? - more realistic
  joint_stiff: [5, 15, 15, 5] # (Nm/rad) stiffness of antagonistic springs
  joint_stiff_lims:  [[10, 80, 80, 10], # spring engagement starting angle
                      [-90, 180, 180, -90]] # spring engagement ending angle TODO: is this needed? - prob not, not implemented in code right now
  mu: 0.99 # Coulomb foot friction coefficient


morphology: # robot morphology [shank_r, thigh_r, torso, thigh_l, shank_l]
  l: [0.55, 0.55, 0.55, 0.55, 0.55] # (m) link lengths
  # r: l/2 # (m) TODO: center of mass? TODO: is this used anywhere in matlab code?
  m: [0.31, 0.28, 0.54, 0.28, 0.31] # (kg) robot link masses [0.31, (0.23+0.05), (0.44+2*0.05), (0.23+0.05), 0.31]
  r_cyl: 0.02 # (m) cylinder radius of each link for inertial calcs
# J: 1/12*m*(3*r_cyl^2 + l^2); # (kg/m^2) # cylinder inertia formula


